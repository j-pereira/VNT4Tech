
Notas sobre as aulas:

--> Aula 1:
Jetbrains: organização que publica IDE`s

Projeto: VJobs -> CRUD
MOCK -> Referência visual para o desenvolvimento, desenho



--> Aula 2:
Node: plataforma para rodar javascript no servidor (não é framework nem biblioteca)
Requisições rest (https): verbos get, post, put, delete.

Comandos:
npm install <name module>

JSON: 
Javascript object manager notation
Simplificar comunicação entre linguagens

npm i -s  = npm install -save
O express já tem http dentro dele

-s é para salvar dependencias do Projeto, o que o projeto não precisa para rodar, não precisa do -s

nodemon para não precisar subir o servidor a cada alteração


--> Aula 3:
ES6: Nome oficial do Javascript
Desenvolvendo para web, quais elementos os navegadores suportam: Can I use?

ES6: 
const, let e var
Arrow function: (nome do parâmetro) => { lógica } - Mantém o escopo de fora, this se refere à classe de fora (diferente do escopo da função sem arrow func, onde o this se refere a função).
Array functions: métodos de iteração
Spread operator: toda cópia de objeto cria uma referência ao objeto, então quando você muda o obj copiado, acaba mudando a referência também. Usar o spread evita isso ( b = {...a})

- find:
a = [1, 2, 3]
(3) [1, 2, 3]
a.find(el => {return el == 2})
2
a.find(el => {return el == 3})
3

- map:
a.map((pessoa, indice) => {return pessoa.posicao = indice})
(2) [0, 1]
a
(2) [{…}, {…}]
0
:
{nome: "Adriano", sexo: "M", posicao: 0}
1
:
{nome: "Bruno", sexo: "M", posicao: 1}
length
:
2
__proto__
:
Array(0)

- find obj:
pessoaEncontrada = a.find(pessoa => pessoa.sexo == "M")
{nome: "Adriano", sexo: "M", posicao: 0}

- copying obj:
p2 = Object.assign({}, p) -> pega o priemiro nível.
Se fosse um array de objeto os atributos dos obj iam ficar com cópia por referência. Para isso usar a = JSON.parse(JSON.stringfy(array))
Cópias pelo contrutor da classe cria uma nova instância.

-> Firebase:
"Criar apps melhores e desenvolver sua empresa"
Para plataformas web e mobile. Objetivo aplicação serverless (sem o node).
Escalável
Uma das funcionalidades: database


NODE: arquivo jobs.js em routes usando dados do arquivo JSON
  app.get('/jobs/:id', async (req, res) => {
      const id = req.params.id;
      let job = jobs.find(job => {return job.id == id})
      res.send(job);
  });
  */

  //app.get('/jobs', async (req, res) => {
  //    return res.send(jobs);
  //});


  /*
  app.post('/jobs', async (req, res) => {
      try {
          let jobsLength = jobs.length;
          let job = createJob(req.body);
          jobs.push(job);
          if (jobs.length > jobsLength) return res.send('Added');
          return res.status(500).send('Internal error');
      } catch (error) {
          return res.status(500).send('Internal error');
      }
  });









--> Aula 4:
Framework JS: um framework contém várias bibliotecas
Grannt, gup, uglyfy -> automatizador de tarefas
10 javascript frameworks: angular, react, vue
Elementos semânticos html

Single page application: 
seo n, tam.req n/y, reuso y, perf y
Multi page application: 
seo y, tam.req y, reuso n, perf n


React: 
Declarative, component-based, learn once, write anywhere
Virtual DOM
jsx forma de escrever html em javascript

function Pessoa(props) {
  return (
    <div>
      <h1>{props.nome}</h1>
      <p>Idade: {props.idade}</p>
    </div>
  )
}

const app = (
  <div>
    <Pessoa nome="Adiano" idade="27"></Pessoa>
    <Pessoa nome="João" idade="28"></Pessoa>
  </div> 
)

ReactDOM.render(app, document.querySelector("#app"));

html:
<div id="app"></div>

-----------------------------------
function Image (props) {
  return (
    <img className="card-img-top" src={props.src}/>
  )
}

function Title (props) {
  return (
    <h5 className="card-title">{props.name}</h5>
  )
}

function Description (props) {
  return (
    <p className="card-text">{props.text}</p>
  )
}

function Salary (props) {
  return (
    <p>
      <strong>Salário base:</strong>
      <br/>{props.value}
    </p>
  )
}

function Button (props) {
  return (
    <a href="#" className={props.styleClass}><Icon icon={props.icon}></Icon></a>
  )
}

function Icon (props) {
  return (
    <i className={props.icon}></i>
  )
}

const card = (
  <div className="col-md-3">
    <div className="card mb-3">
      <Image src="https://goo.gl/JT9QCG"></Image>
        <div className="card-body">
          <Title name="Desenvolvedor Front-End Jr"></Title>
          <Description text="Some quick example text to build on the card title and make up the bulk of the card's content."></Description>
          <Salary value="R$100,00"></Salary>
          <Button styleClass="btn btn-warning" icon="fas fa-edit"></Button>
          <Button styleClass="btn btn-danger" icon="fas fa-trash-alt"></Button>
        </div>
      </div>
    </div>
)

      
ReactDOM.render(card, document.querySelector("#card"));


HTML: <div id="card"></div>
------------------------------------




--> Aula sábado:
react create app -> biblioteca do node
cli, client para facilitar instalação e configuração inicial do react
pwa -> web apps



Tudo que vá fazer no react é reutilizando componentes
Componentes recebem entradas props e retornam elementos do react, que descreve o que vai aparecer na tela
Componentes são peças reutilizáveis e parametrizáveis 
CSS models é a separação de escopo do CSS
Ao importar, qundo colocar só o nome, ele vai interpretar como pacote. Quando coloco "./", ele vai procurar o arquivo.
E quando não colocar a extensão, vai procurar sempre .js

Uma função precisa retornar algo, mas uma arrow func não precisa da palavra return, então omitindo o return não precisa dos {}
O export default fala que o ue aquele arquivo vai exportar por default é p nome daquela função. No caso o export default da classe Header é a função header
Base da aplicação é o src
Para imagens, não funciona o "./", que começa da pasta em que eu ESTOU

STATE
Como um snapshot do componente
Cada componente possui um componente
Ativa método chamado de render
Atualizar um state é preciso usar o setState()


PROPS
Configuração do componêntes, parâmetros
Props são enviadas do componente pai pro filho (os parâmetros são passados do comp pai pro filho)

Dois tipos de componentes:
statefull: tem state e props 
stateless: tem apenas props, apenas exibem informações

Passar uma função como parâmetro faz ela executar de cara
Para chamadas a um servidor, é preciso estar dentro de um statefull component
setState mergeia o objeto, ao invés de sobrescrever

Ciclo de vida:
Executa métodos em determinados momentos:
- Inicialização
- Montagem do componente
- Atualização
- Desmonte do componente


Para chamar uma tag dentro da outra ela sempre precisa ser children (?)


Na arrow function, se eu quiser omitir o "return", ao invés da {}, usar diretamente o ()

Se eu quiser mudar dinamicamente alguma informação na tela, usar o state.
Se for apenas read only, usar o props
State só pode ser modificado quando o componente já existe (não pode no construtor)

Arrow func quando recebe nenhum parametro, precisa colocar () vazio

Na web moderna, usar diologs ao invés de windows alert ou confirm

Não pode fazer nenhuma modificação diretamente num obj state, apenas pelo setState!!!

Spread operator é a mesma coisa que copiar atributo a atributo de um objeto

Sempre que chama o setState, ele chama o render() de novo


